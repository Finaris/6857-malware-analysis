# -*- coding: utf-8 -*-
"""

This module implements the Scraper interface for
ransomware for data mining purposes.

"""

import logging
import os

from datetime import datetime

from scraper import Category, RecordAttribute, Scraper


class RansomwareScraper(Scraper):
    """ Implementation of Scraper for ransomware. """

    def __init__(self):
        # Specify the short name and move on.
        self.short_name = "ransomware"
        super().__init__(self.short_name, None, None)

        # Set and clear the remaining class attributes.
        self.base_path = os.path.dirname(os.path.realpath(__file__)) + "/persistent_data/ransomware/"
        self.files = os.listdir(self.base_path)
        self.records = {}
        self.timestamp = None

    def scrape(self):
        # Before beginning, clear all records and update the timestamp.
        self.records = {}
        self.timestamp = datetime.now()

        # Add each file as a series of records.
        for file in self.files:
            with open(self.base_path+file) as ransomware_file:
                records = []
                for line in ransomware_file.readlines():
                    line_content = line.strip()
                    if line_content and line_content[0] != "#":
                        new_record = {
                            RecordAttribute.CATEGORY: Category.RANSOMWARE
                        }
                        if self.is_url_ip_address(line_content):
                            new_record[RecordAttribute.IP] = line_content
                        else:
                            new_record[RecordAttribute.URL] = line_content
                        records.append(new_record)
                self.records[file] = records
        logging.info("Completed scraping {0}".format(self.short_name))
