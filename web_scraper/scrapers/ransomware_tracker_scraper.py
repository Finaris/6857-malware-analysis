# -*- coding: utf-8 -*-
"""

This module implements the Scraper interface for
Ransomware Tracker for data mining purposes.

"""

import logging
import os

from datetime import datetime

from scraper import Category, RecordAttribute, Scraper


class RansomwareTrackerScraper(Scraper):
    """ Implementation of Scraper for Ransomware Tracker. """

    def __init__(self):
        # Specify the short name and move on.
        self.short_name = "ransomware_tracker"
        super().__init__(self.short_name, None, None)

        # Set and clear the remaining class attributes.
        self.base_path = os.path.dirname(os.path.realpath(__file__)) + "/persistent_data/ransomwaretracker/"
        self.files = os.listdir(self.base_path)
        self.records = {}
        self.timestamp = None

    def scrape(self):
        # Before beginning, clear all records and update the timestamp.
        self.records = {}
        self.timestamp = datetime.now()

        # Add each file as a series of records. This is also a really easy CSV to pick apart.
        for i, file in enumerate(self.files):
            with open(self.base_path+file) as ransomware_tracker_file:
                records = []
                for line in ransomware_tracker_file.readlines():
                    line_content = line.strip()
                    if line_content and line_content[0] != "#":
                        # Parse the base information.
                        date, _, _, _, url, status, registrar, ips, asns, cc = line_content.split("\",\"")
                        new_record = {
                            RecordAttribute.CATEGORY: Category.RANSOMWARE,
                            RecordAttribute.DATE: str(datetime.strptime(date, "\"%Y-%m-%d %H:%M:%S")),
                            RecordAttribute.URL: url,
                            RecordAttribute.STATUS: status,
                        }

                        # Add registrar if it exists.
                        if registrar:
                            new_record[RecordAttribute.REGISTRAR] = registrar

                        # Add IPs, ASNs, and Countries as needed.
                        ip_list, asn_list, cc_list = ips.split("|"), asns.split("|"), cc.split("|")
                        if len(ip_list) == 1:
                            if asn_list[0]:
                                new_record[RecordAttribute.ASN] = int(asn_list[0])
                            if ip_list[0]:
                                new_record[RecordAttribute.IP] = ip_list[0]
                            if cc_list[0].replace("\"", ""):
                                new_record[RecordAttribute.CC] = cc_list[0].replace("\"", "")
                            records.append(new_record)
                        for j, ip_address in enumerate(ip_list):
                            additional_record = dict(new_record)
                            asn_value = asn_list[j] if j < len(asn_list) else asn_list[0]
                            cc_value = cc_list[j].split(",")[0].replace("\"", "") \
                                if j < len(cc_list) else cc_list[0].split(",")[0].replace("\"", "")

                            if asn_value:
                                additional_record[RecordAttribute.ASN] = int(asn_value)
                            if ip_address:
                                additional_record[RecordAttribute.IP] = ip_address
                            if cc_value:
                                additional_record[RecordAttribute.CC] = cc_value

                            if "ip" in additional_record and not additional_record["ip"]:
                                print(additional_record)
                            records.append(additional_record)
                self.records[file] = records
            logging.info("({0}/{1}): Finished processing {2}".format(i + 1, len(self.files), file))
        logging.info("Completed scraping {0}".format(self.short_name))
