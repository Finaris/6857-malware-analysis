# -*- coding: utf-8 -*-
"""

This module implements the Scraper interface for
Phishtank for data mining purposes.

"""

import csv
import logging
import os

from datetime import datetime

from .scraper import Category, RecordAttribute, Scraper


class PhishtankScraper(Scraper):
    """ Implementation of Scraper for Phishtank. """

    def __init__(self):
        # Specify the short name and move on.
        self.short_name = "phishtank"
        super().__init__(self.short_name)

        # Set and clear the remaining class attributes.
        self.base_path = os.path.dirname(os.path.realpath(__file__)) + "/persistent_data/phishtank/"
        self.files = os.listdir(self.base_path)
        self.records = {}
        self.timestamp = None

    def scrape(self):
        # Before beginning, clear all records and update the timestamp.
        self.records = {}
        self.timestamp = datetime.now()

        # Add each file as a series of records. This is a really easy CSV to pick apart.
        for i, file in enumerate(self.files):
            with open(self.base_path+file) as csv_file:
                records = []
                for j, row in enumerate(csv.reader(csv_file)):
                    # Ignore first row.
                    if j == 0:
                        continue

                    # Process entries and make a new record.
                    url = row[1]
                    date = str(datetime.strptime(row[3], "%Y-%m-%dT%H:%M:%S+00:00"))
                    status = "online" if row[-2] == "yes" else "offline"

                    records.append({
                        RecordAttribute.CATEGORY: Category.PHISHING,
                        RecordAttribute.DATE: date,
                        RecordAttribute.URL: url,
                        RecordAttribute.STATUS: status
                    })
                self.records[file] = records
            logging.info("({0}/{1}): Finished processing {2}".format(i + 1, len(self.files), file))
        logging.info("Completed scraping {0}".format(self.short_name))
