# -*- coding: utf-8 -*-
"""

This module implements the Scraper interface for
URLHaus abuse for data mining purposes.

"""

import logging
import os

from datetime import datetime
from typing import Dict, List

from .scraper import Category, RecordAttribute, Scraper


class UrlhausAbuseScraper(Scraper):
    """ Implementation of Scraper for URLHaus abuse. """

    def __init__(self):
        # Specify the short name and move on.
        self.short_name = "urlhaus_abuse"
        super().__init__(self.short_name)

        # Set and clear the remaining class attributes.
        self.base_path = os.path.dirname(os.path.realpath(__file__)) + "/persistent_data/urlhaus/"
        self.files = sorted(os.listdir(self.base_path))
        self.records = {}
        self.timestamp = None

    def scrape(self):
        # Before beginning, clear all records and update the timestamp.
        self.records = {}
        self.timestamp = datetime.now()

        # Process abuse files.
        self.records[self.files[0]] = self._process_abuse(self.files[0])
        logging.info("(1/1): Finished processing {0}".format(self.files[0]))
        logging.info("Completed scraping {0}".format(self.short_name))

    def _process_abuse(self, file_name: str) -> List[Dict]:
        """ Given a URLHaus abuse file, convert it into our representation.

        :param file_name: (str) Name of the file containing abuse data.
        :return: (list) A list of records.
        """
        with open(self.base_path+file_name) as abuse_file:
            records = []
            for line in abuse_file.readlines():
                # Ignore comments at the beginning of the file.
                if line[0] == "#":
                    continue

                # Break apart the CSV and make a record.
                _, date, url, status, _, _, _ = line.strip().split("\",\"")
                records.append({
                    RecordAttribute.DATE: str(datetime.strptime(date, "%Y-%m-%d %H:%M:%S")),
                    RecordAttribute.URL: url,
                    RecordAttribute.STATUS: status,
                    RecordAttribute.CATEGORY: Category.GENERAL_MALWARE
                })
            return records
