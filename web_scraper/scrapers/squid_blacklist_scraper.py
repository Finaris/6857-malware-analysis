# -*- coding: utf-8 -*-
"""

This module implements the Scraper interface for
Squid Blacklist for data mining purposes.

"""

import logging
import os

from datetime import datetime
from ipaddress import IPv4Network
from typing import Dict, List

from scraper import Category, RecordAttribute, Scraper


class SquidBlacklistScraper(Scraper):
    """ Implementation of Scraper for Squid Blacklist. """

    def __init__(self):
        # Specify the short name and move on.
        self.short_name = "squid_blacklist"
        super().__init__(self.short_name, None, None)

        # Set and clear the remaining class attributes.
        self.base_path = os.path.dirname(os.path.realpath(__file__)) + "/persistent_data/squid_blacklist/"
        self.files = os.listdir(self.base_path)
        self.records = {}
        self.timestamp = None

    def scrape(self):
        # Before beginning, clear all records and update the timestamp.
        self.records = {}
        self.timestamp = datetime.now()

        # Add each file as a series of records. Each one requires somewhat specific processing.
        self._process_dns(self.files[0])
        logging.info("(1/2): Finished processing {0}".format(self.files[0]))
        self._process_tik(self.files[1])
        logging.info("(2/2): Finished processing {0}".format(self.files[1]))
        logging.info("Completed scraping {0}".format(self.short_name))

    def _process_dns(self, file_name: str) -> List[Dict]:
        """ Processes a Squid Blacklist malicious DNS record.

        :param file_name: (str) Name of the file.
        :return: (list) List of records.
        """
        with open(self.base_path + file_name) as dns_file:
            records = []
            for line in dns_file.readlines():
                line_content = line.strip()
                if line_content and line_content[:2] != "//":
                    records.append({
                        RecordAttribute.CATEGORY: Category.GENERAL_MALWARE,
                        RecordAttribute.URL: line_content.split()[1].replace("\"", "")
                    })
            return records

    def _process_tik(self, file_name: str) -> List[Dict]:
        """ Processes a Squid Blacklist Tik malicious URL list.

        :param file_name: (str) Name of the file.
        :return: (list) List of records.
        """
        with open(self.base_path + file_name) as tik_file:
            records = []
            for line in tik_file.readlines():
                line_content = line.strip()
                if line_content and line_content[:3] == "/do":
                    records.append({
                        RecordAttribute.CATEGORY: Category.GENERAL_MALWARE,
                        RecordAttribute.URL: line_content.split()[7].replace("dst-host=", "")
                    })
            return records
