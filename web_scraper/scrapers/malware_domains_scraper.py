# -*- coding: utf-8 -*-
"""

This module implements the Scraper interface for
Malware Domains for data mining purposes.

"""

import csv
import logging
import os

from datetime import datetime

from .scraper import Category, RecordAttribute, Scraper


class MalwareDomainsScraper(Scraper):
    """ Implementation of Scraper for Malware Domains. """

    def __init__(self):
        # Specify the short name and move on.
        self.short_name = "malware_domains"
        super().__init__(self.short_name)

        # Set and clear the remaining class attributes.
        self.base_path = os.path.dirname(os.path.realpath(__file__)) + "/persistent_data/malware_domains/"
        self.files = os.listdir(self.base_path)
        self.records = {}
        self.timestamp = None

    def scrape(self):
        # Before beginning, clear all records and update the timestamp.
        self.records = {}
        self.timestamp = datetime.now()

        # Add each file as a series of records.
        for i, file in enumerate(self.files):
            with open(self.base_path+file) as malware_domains_file:
                records = []
                valid_categories = {Category.__dict__[name]
                                    for name in filter(lambda attr: "_" not in attr, Category.__dict__.keys())}
                for line in malware_domains_file.readlines():
                    line_contents = line.strip()
                    if line_contents and line_contents[0] != "#":
                        line_contents = [element.strip() for element in line_contents.split()]
                        url, cat, date, = line_contents[0], line_contents[1], line_contents[-1]
                        records.append({
                            RecordAttribute.CATEGORY: cat if cat in valid_categories else Category.GENERAL_MALWARE,
                            RecordAttribute.URL: url,
                            RecordAttribute.DATE: str(datetime.strptime(date, "%Y%m%d"))
                        })
                self.records[file] = records
            logging.info("({0}/{1}): Finished processing {2}".format(i + 1, len(self.files), file))
        logging.info("Completed scraping {0}".format(self.short_name))
