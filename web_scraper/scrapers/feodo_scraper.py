# -*- coding: utf-8 -*-
"""

This module implements the Scraper interface for
Feodo for data mining purposes.

"""

import csv
import logging
import os

from datetime import datetime
from typing import Dict, List

from scraper import Category, RecordAttribute, Scraper


class FeodoScraper(Scraper):
    """ Implementation of Scraper for Feodo. """

    def __init__(self):
        # Specify the short name and move on.
        self.short_name = "feodo"
        super().__init__(self.short_name, None, None)

        # Set and clear the remaining class attributes.
        self.base_path = os.path.dirname(os.path.realpath(__file__)) + "/persistent_data/feodo/"
        self.files = sorted(os.listdir(self.base_path))
        self.records = {}
        self.timestamp = None

    def scrape(self):
        # Before beginning, clear all records and update the timestamp.
        self.records = {}
        self.timestamp = datetime.now()

        # Scrape the two CSVs separately.
        self.records[self.files[0]] = self._process_ipblocklist(self.files[0])
        logging.info("(1/2): Finished processing {0}".format(self.files[0]))
        self.records[self.files[1]] = self._process_hashes(self.files[1])
        logging.info("(2/2): Finished processing {0}".format(self.files[1]))
        logging.info("Completed scraping {0}".format(self.short_name))

    def _process_ipblocklist(self, file_name: str) -> List[Dict]:
        """ Processes a CSV containing IP block list information.

        :param file_name: (str) Name of the file.
        :return: (list) List of records.
        """
        with open(self.base_path + file_name) as csv_file:
            records = []
            for j, row in enumerate(csv.reader(csv_file)):
                # Ignore first row.
                if j == 0:
                    continue

                # Process entries and make a new record.
                records.append({
                    RecordAttribute.CATEGORY: Category.BOTNET,
                    RecordAttribute.DATE: str(datetime.strptime(row[0], "%Y-%m-%d %H:%M:%S")),
                    RecordAttribute.IP: row[1]
                })
            return records

    def _process_hashes(self, file_name: str) -> List[Dict]:
        """ Processes a CSV containing malware hashes.

        :param file_name: (str) Name of the file.
        :return: (list) List of records.
        """
        with open(self.base_path + file_name) as csv_file:
            records = []
            for j, row in enumerate(csv.reader(csv_file)):
                # Ignore first row.
                if j == 0:
                    continue

                # Process entries and make a new record.
                records.append({
                    RecordAttribute.CATEGORY: Category.GENERAL_MALWARE,
                    RecordAttribute.DATE: str(datetime.strptime(row[0], "%Y-%m-%d %H:%M:%S")),
                    RecordAttribute.MD5: row[1]
                })
            return records
