# -*- coding: utf-8 -*-
"""

This module implements the Scraper interface for
Ponmocup for data mining purposes.

"""

import csv
import logging
import os

from datetime import datetime
from typing import Dict, List

from scraper import Category, RecordAttribute, Scraper


class PonmocupScraper(Scraper):
    """ Implementation of Scraper for Ponmocup. """

    def __init__(self):
        # Specify the short name and move on.
        self.short_name = "ponmocup"
        super().__init__(self.short_name, None, None)

        # Set and clear the remaining class attributes.
        self.base_path = os.path.dirname(os.path.realpath(__file__)) + "/persistent_data/ponmocup/"
        self.files = sorted(os.listdir(self.base_path))
        self.records = {}
        self.timestamp = None

    def scrape(self):
        # Before beginning, clear all records and update the timestamp.
        self.records = {}
        self.timestamp = datetime.now()

        # Add each file as a series of records. Handle all of them separately.
        self.records[self.files[0]] = self._process_latest_domains(self.files[0])
        logging.info("(1/5): Finished processing {0}".format(self.files[0]))
        self.records[self.files[1]] = self._process_shadowserver(self.files[1])
        logging.info("(2/5): Finished processing {0}".format(self.files[1]))
        self.records[self.files[2]] = self._process_urls(self.files[2])
        logging.info("(3/5): Finished processing {0}".format(self.files[2]))
        self.records[self.files[3]] = self._process_old_urls(self.files[3])
        logging.info("(4/5): Finished processing {0}".format(self.files[3]))
        self.records[self.files[4]] = self._process_latest_urls(self.files[4])
        logging.info("(5/5): Finished processing {0}".format(self.files[4]))
        logging.info("Completed scraping {0}".format(self.short_name))

    def _process_latest_domains(self, file_name: str) -> List[Dict]:
        """ Processes latest Ponmocup domains.

        :param file_name: (str) Name of the file.
        :return: (list) List of records.
        """
        with open(self.base_path + file_name) as latest_domains_file:
            records = []
            for line in latest_domains_file.readlines():
                # Get the line and only parse necessary stuff.
                line_content = line.strip()
                if not line_content or line_content[0] == "#":
                    continue

                # Add all URLs.
                for url in line_content.split()[1:]:
                    records.append({
                        RecordAttribute.CATEGORY: Category.BOTNET,
                        RecordAttribute.URL: url
                    })
            return records

    def _process_shadowserver(self, file_name: str) -> List[Dict]:
        """ Processes Ponmocup shadowserver.

        :param file_name: (str) Name of the file.
        :return: (list) List of records.
        """
        with open(self.base_path + file_name) as csv_file:
            records = []
            for j, row in enumerate(csv.reader(csv_file)):
                # Ignore first row.
                if j == 0:
                    continue

                # Process entries and make a new record.
                records.append({
                    RecordAttribute.CATEGORY: Category.GENERAL_MALWARE,
                    RecordAttribute.DATE: str(datetime.strptime(row[0], "%Y-%m-%d %H:%M:%S")),
                    RecordAttribute.IP: row[1],
                    RecordAttribute.URL: row[2] + row[3]
                })
                records.append({
                    RecordAttribute.CATEGORY: Category.GENERAL_MALWARE,
                    RecordAttribute.DATE: str(datetime.strptime(row[0], "%Y-%m-%d %H:%M:%S")),
                    RecordAttribute.URL: row[-2]
                })
            print(records)
            return records

    def _process_urls(self, file_name: str) -> List[Dict]:
        """ Processes Ponmocup URLs.

        :param file_name: (str) Name of the file.
        :return: (list) List of records.
        """
        with open(self.base_path + file_name) as latest_domains_file:
            records = []
            for line in latest_domains_file.readlines():
                # Get the line and only parse necessary stuff.
                line_content = line.strip()
                if not line_content or line_content[0] == "#":
                    continue

                # Create and add a new record.
                line_content = line_content.split()
                records.append({
                    RecordAttribute.CATEGORY: Category.BOTNET,
                    RecordAttribute.DATE: str(datetime.strptime(line_content[0], "%Y-%m-%d")),
                    RecordAttribute.URL: line_content[1]+line_content[3],
                    RecordAttribute.IP: line_content[5]
                })
            return records

    def _process_old_urls(self, file_name: str) -> List[Dict]:
        """ Processes old Ponmocup URLs.

        :param file_name: (str) Name of the file.
        :return: (list) List of records.
        """
        with open(self.base_path + file_name) as latest_domains_file:
            records = []
            for line in latest_domains_file.readlines():
                # Get the line and only parse necessary stuff.
                line_content = line.strip()
                if not line_content or line_content[0] == "#":
                    continue

                # Create and add a new record.
                line_content = line_content.split()
                records.append({
                    RecordAttribute.CATEGORY: Category.GENERAL_MALWARE,
                    RecordAttribute.DATE: str(datetime.strptime(line_content[0], "[%d/%m/%Y:%H:%M:%S]")),
                    RecordAttribute.IP: line_content[1],
                    RecordAttribute.URL: line_content[2]
                })
            return records

    def _process_latest_urls(self, file_name: str) -> List[Dict]:
        """ Processes latest Ponmocup URLs.

        :param file_name: (str) Name of the file.
        :return: (list) List of records.
        """
        with open(self.base_path + file_name) as latest_domains_file:
            records = []
            for line in latest_domains_file.readlines():
                # Get the line and only parse necessary stuff.
                line_content = line.strip()
                if not line_content or line_content[0] == "#":
                    continue

                # Create and add a new record.
                line_content = line_content.split()
                records.append({
                    RecordAttribute.CATEGORY: Category.GENERAL_MALWARE,
                    RecordAttribute.DATE: str(datetime.strptime(line_content[0], "%d/%m/%Y:%H:%M:%S")),
                    RecordAttribute.IP: line_content[1],
                    RecordAttribute.URL: line_content[2]
                })
            return records
