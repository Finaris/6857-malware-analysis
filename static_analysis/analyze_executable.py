# -*- coding: utf-8 -*-
"""

This module is responsible for performing static
analysis on various Windows executables.

"""

import hashlib
import json
import os
import pefile
import time


OUTPUT_LOCATION = "malware_samples"


if __name__ == "__main__":
    # First, load all of the URLs.
    with open("hosted_malware.json") as malware_url_file:
        malware_urls = json.load(malware_url_file)

    # Next, load everything in the directory that is a file with some extension.
    # Create records for each file.
    records, i = [], -1
    for executable_file_name in filter(lambda blob: "." in blob, os.listdir(OUTPUT_LOCATION)):
        # Make a new record that will be stored.
        real_path = os.path.join(OUTPUT_LOCATION, executable_file_name)
        record = {
            "category": "general malware"
        }

        # First, figure out the full URL of the file.
        while i < len(malware_urls):
            i += 1
            if executable_file_name in malware_urls[i]:
                record["url"] = malware_urls[i]
                break

        # Next, store some hashes of the file.
        with open(real_path, "rb") as file:
            record["md5"] = hashlib.md5(file.read()).hexdigest()
            record["sha256"] = hashlib.sha256(file.read()).hexdigest()

        # Next, get some general metadata.
        record["size"] = os.path.getsize(real_path)

        # Do some pefile processing of data. Time is UTC time.
        try:
            pe_file = pefile.PE(real_path)
            record["imphash"] = pe_file.get_imphash()
            record["compile_time"] = f"{time.asctime(time.gmtime(pe_file.FILE_HEADER.TimeDateStamp))}"
        except pefile.PEFormatError:
            print("Skipping PE analysis on sample due to formatting error...")

        # Save the final result.
        records.append(record)

    # Write the results to some output file.
    with open("hosted_malware_records.json", "w+") as output_file:
        json.dump(records, output_file)
